"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var https_proxy_agent_1 = __importDefault(require("https-proxy-agent"));
var socks_proxy_agent_1 = __importDefault(require("socks-proxy-agent"));
var ProxyProtocolError = (function (_super) {
    __extends(ProxyProtocolError, _super);
    function ProxyProtocolError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ProxyProtocolError;
}(Error));
var proxyAgent = function (proxyConfig) {
    var auth = '';
    if (proxyConfig.auth) {
        auth = proxyConfig.auth.username + ":" + proxyConfig.auth.password + "@";
    }
    switch (proxyConfig.protocol) {
        case 'http':
        case 'https': {
            var httpsAgent = https_proxy_agent_1.default(proxyConfig.protocol + "://" + auth + proxyConfig.host + ":" + proxyConfig.port);
            return httpsAgent;
        }
        case 'socks4':
        case 'socks4a':
        case 'socks5':
        case 'socks5h':
        case 'socks': {
            var socksAgent = socks_proxy_agent_1.default(proxyConfig.protocol + "://" + auth + proxyConfig.host + ":" + proxyConfig.port);
            return socksAgent;
        }
        default:
            throw new ProxyProtocolError('protocol is not accepted');
    }
};
exports.default = proxyAgent;
