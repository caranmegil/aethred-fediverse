"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var readline = __importStar(require("readline"));
var megalodon_1 = require("megalodon");
var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
var BASE_URL = 'https://misskey.io';
var clientId;
var clientSecret;
var client = new megalodon_1.Misskey(BASE_URL);
client
    .registerApp('Test App')
    .then(function (appData) {
    clientId = appData.clientId;
    clientSecret = appData.clientSecret;
    console.log('\napp_secret_key:');
    console.log(clientSecret);
    console.log('Authorization URL is generated.');
    console.log(appData.url);
    console.log();
    return new Promise(function (resolve) {
        rl.question('Enter any keys after you authorize to misskey: ', function (_code) {
            resolve(appData.session_token);
            rl.close();
        });
    });
})
    .then(function (session_token) {
    if (!session_token) {
        throw new Error('Could not get session token');
    }
    return client.fetchAccessToken(clientId, clientSecret, session_token);
})
    .then(function (tokenData) {
    console.log('\naccess_token:');
    console.log(tokenData.accessToken);
    console.log('\nrefresh_token:');
    console.log(tokenData.refreshToken);
    console.log();
})
    .catch(function (err) {
    console.error(err);
});
